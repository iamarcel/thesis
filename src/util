#!/usr/bin/env python

import argparse
import logging
import naoqi  # Needs to be imported before random? Why? No clue.
from random import randint

import json
import jsonlines

import common.data_utils
import common.pose_utils
import common.bot
import common.visualize

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


if __name__ == '__main__':
    command_choices = [
        'config_to_clips',
        'remove_duplicate_clips',
        'add_clips_to', 'merge',
        'move_2d_finished_images',
        'clip_stats',
        'normalize',
        'add-angles',
        'sample',
        'test-angle-conversion',
        'bot-play',
        'plot-nao-zero',
        'test-plot-angles',
        'angle-frame-lines-to-poses',
        'bot-play-clusters'
    ]

    parser = argparse.ArgumentParser(description='Manipulate clip data files.')
    parser.add_argument('command', metavar='command', type=str, nargs=1,
                        help="The command to execute. One of {}"
                        .format(command_choices),
                        choices=command_choices)
    parser.add_argument('args', metavar='args', type=str, nargs='*',
                        help='Arguments for the command')

    args = parser.parse_args()

    command_name = args.command[0]
    if command_name == 'config_to_clips':
        common.data_utils.config_to_clips(*args.args)
    elif command_name == 'remove_duplicate_clips':
        common.data_utils.remove_duplicate_clips(*args.args)
    elif command_name == 'add_clips_to':
        common.data_utils.add_clips_to(*args.args)
    elif command_name == 'merge':
        common.data_utils.add_clips_to(*args.args)
    elif command_name == 'move_2d_finished_images':
        common.data_utils.move_2d_finished_images(*args.args)
    elif command_name == 'clip_stats':
        common.data_utils.clip_stats(*args.args)
    elif command_name == 'normalize':
        common.data_utils.normalize_clips(*args.args)
    elif command_name == 'add-angles':
        common.data_utils.add_clip_angles(*args.args)
    elif command_name == 'test-angle-conversion':
        clips = common.data_utils.get_clips()

        clip = None
        while clip is None or 'points_3d' not in clip or len(clip['points_3d']) == 0:
            logger.info('Getting a random clip')
            clip = clips[randint(0, len(clips))]

        poses = clip['points_3d']

        angles = map(common.pose_utils.get_pose_angles, poses)
        new_poses = map(common.pose_utils.get_pose_from_angles, angles)
        h36m_poses = map(common.pose_utils.format_joint_dict, new_poses)

        common.visualize.animate_3d_poses(poses)
        common.visualize.animate_3d_poses(list(h36m_poses))
    elif command_name == 'bot-play':
        bot = common.bot.BotController(33115)

        angles = []
        with open(args.args[0], "r") as read_file:
            angles = json.load(read_file)['clip']

        bot.play_angles(angles)
    elif command_name == 'plot-nao-zero':
        nao_h36m = [[0, 0, 0]] * 32
        for key, value in common.pose_utils.NAO_ZERO_POSE.iteritems():
            nao_h36m[common.pose_utils.H36M_NAMES.index(key)] = value
        common.visualize.show_3d_pose(nao_h36m)
    elif command_name == 'test-plot-angles':
        clips = common.data_utils.get_clips()
        clip = clips[randint(0, len(clips))]
        if not 'angles' in clip:
            raise ValueError('No angles in this clip')
        angles = clip['angles']
        print json.dumps(angles[0], indent=4)

        common.visualize.show_3d_pose(clip['points_3d'][0])

        named_pose = common.pose_utils.get_pose_from_angles(angles[0])
        nao_h36m = [[0, 0, 0]] * 32
        for key, value in named_pose.iteritems():
            nao_h36m[common.pose_utils.H36M_NAMES.index(key)] = value

        common.visualize.show_3d_pose(nao_h36m)
    elif command_name == 'angle-frame-lines-to-poses':
        file_names = args.args

        with jsonlines.open('converted-poses.jsonl', 'w') as writer:
            for file_name in file_names:
                poses = []
                frames = []
                with jsonlines.open(file_name, 'r') as reader:
                    for angles in reader:
                        frames.append(angles)
                        poses.append(common.pose_utils.format_joint_dict(common.pose_utils.get_pose_from_angles(angles)).tolist())
                writer.write(dict(
                    points_3d=poses,
                    angles=frames
                ))
    elif command_name == 'bot-play-clusters':
        clusters = []
        with jsonlines.open('stats/center-points.jsonl', 'r') as reader:
            for cluster in reader:
                clusters.append(cluster)

        all_angles = []
        for i in args.args:
            all_angles += clusters[int(i)]['angles']

        bot = common.bot.BotController(43333)
        bot.play_angles(all_angles)
    else:
        logger.error("Command {} not found.".format(command_name))
